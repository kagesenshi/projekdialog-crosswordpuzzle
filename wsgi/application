#!/usr/bin/python
import os, urlparse
import json, urllib

virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

def application(environ, start_response):

    ctype = 'text/plain'
    if environ['PATH_INFO'] == '/health':
    	response_body = "1"
    elif environ['PATH_INFO'] == '/env':
    	response_body = ['%s: %s' % (key, value)
                    for key, value in sorted(environ.items())]
    	response_body = '\n'.join(response_body)
#    elif environ['PATH_INFO'] == '/puzzle.json':
#        ctype='text/json'
#        qs = urlparse.parse_qs(environ['QUERY_STRING'])
#        if 'url' in qs and qs['url']:
#            data = json.loads(urllib.urlopen(qs['url'][0]).read())
#            response_body = json.dumps(data)
#        else:
#            response_body = ''
    else:
    	ctype = 'text/html'
#        qs = urlparse.parse_qs(environ['QUERY_STRING'])
#        url = ''
#        if 'url' in qs and qs['url']:
#            url = qs['url'][0]
#
#    	response_body = open(
#            os.path.join(
#                os.path.dirname(__file__), 'static', 'index.html'
#            )
#        ).read().replace('puzzle.json', 'puzzle.json?url=%s' % url)
        response_body = """
            <html>
                <head>
                    <meta http-equiv='refresh'
          content="0;url='http://crossword.dev.inigo-tech.com/static/'"/>
                </head>
            </html>
        """

    status = '200 OK'
    response_headers = [
        ('Content-Type', ctype), 
        ('Content-Length', str(len(response_body))),
        ('Refresh', 
            '0; http://crossword.dev.inigo-tech.com/static/')
    ]
    #
    start_response(status, response_headers)
    return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    httpd = make_server('localhost', 8051, application)
    # Wait for a single request, serve it and quit.
    httpd.handle_request()
